/********** dev only component; to test out the random colours generated by the mood to colour map. */
'use client'
import { MoodType, resolvedRoomColourPalette } from "@/types/types";
import { generateMoodRoomColourPalette } from "@/utils/3d-canvas/procedural-generation/colour-mapping/logic/roomThemeMapper";
import { useEffect, useState } from "react";
import ColouredSquare from "@/components/dev-only/colouredSquare";
import { moodTypes } from "@/utils/3d-canvas/const";
import { useTheme } from "next-themes";
import { darkTheme, lightTheme } from "@/utils/UI/const";

export default function ColourViewer() {
  const [mood, setMood] = useState<MoodType>("happy");
  const [roomPalette, setRoomPalette] = useState<resolvedRoomColourPalette | null>(null);

  const {theme} = useTheme()

  // function to regenerate the palette for the current mood
  function regeneratePalette(selectedMood: MoodType = mood){
    const palette = generateMoodRoomColourPalette(selectedMood);
    setRoomPalette(palette);
  };

  useEffect(() => {
    regeneratePalette(mood);
  }, [mood]);

  if (!roomPalette) return null;

  //NOTE:
  //This is just a dev only component; won't be in final product; hence it isn't as broken down as the normal pages.
  return (
    <section className={`p-4 space-y-6 ${theme === 'dark' ? darkTheme : lightTheme}`}>
      {/* Controls */}
      <div className="flex items-center gap-4">
        <label className="flex flex-col text-sm font-medium">
          Mood
          <select
            value={mood}
            onChange={(e) => setMood(e.target.value as MoodType)}
            className={`border rounded px-2 py-1 text-sm ${theme === 'dark' ? darkTheme : lightTheme}`}
          >
            {/* map all the mood types into a select so we can use them inside a drop down */}
            {moodTypes.map((m) => (
              <option key={m} value={m}>
                {m}
              </option>
            ))}
          </select>
        </label>

        <button
          onClick={() => regeneratePalette()}
          className="bg-blue-600 text-white rounded px-4 py-2 text-sm hover:bg-blue-700"
        >
          Regenerate Palette
        </button>
      </div>

      {/* Room foundation colours */}
      <article>
        <h2 className="text-lg font-semibold mb-2">Room foundation colours</h2>
        <ul className="flex gap-2">
          <li>
            <ColouredSquare colour={roomPalette.primary} length={50} />
          </li>
          <li>
            <ColouredSquare colour={roomPalette.secondary} length={50} />
          </li>
          <li>
            <ColouredSquare colour={roomPalette.tertiary} length={50} />
          </li>
        </ul>
      </article>

      {/* Object furniture palette */}
      <article>
        <h2 className="text-lg font-semibold mb-2">Object furniture palette</h2>
        <ul className="flex gap-2">
          <li>
            <ColouredSquare colour={roomPalette.objectColourPalette.primary} length={50} />
          </li>
          <li>
            <ColouredSquare colour={roomPalette.objectColourPalette.secondary} length={50} />
          </li>
          {/* conditionally render the teriary square if it exists */}
          {roomPalette.objectColourPalette.tertiary && (
            <li>
              <ColouredSquare colour={roomPalette.objectColourPalette.tertiary} length={50} />
            </li>
          )}
        </ul>
      </article>
    </section>
  );
}
